{"mappings":"","sources":["src/js/light_stepper.js"],"sourcesContent":["import \"../scss/light_stepper.scss\";\nimport \"animate.css\";\n\nexport default class LightStepper {\n  constructor({\n    pagination,\n    steps,\n    prev,\n    next,\n    stepClass = [\"step\"],\n    paginationClass = [\"step__page\"],\n    stepActiveClass = [\"step--current\"],\n    paginationActiveClass = [\"step__page--current\"],\n    allowOverscroll = false,\n    isValidStep = () => true,\n  }) {\n    this.currentStep = 0;\n    this.firstInit = true;\n\n    // Initialize class properties\n    this.stepClass = stepClass;\n    this.paginationClass = paginationClass;\n    this.stepActiveClass = stepActiveClass;\n    this.paginationActiveClass = paginationActiveClass;\n    this.allowOverscroll = allowOverscroll;\n    this.isValidStep = isValidStep;\n\n    // Get pagination and steps elements\n    this.pagination = document.querySelector(pagination)?.children || [];\n    this.steps = document.querySelector(steps)?.children || [];\n    this.stepsCount = this.steps.length;\n\n    // Get prev and next buttons\n    this.prevButton = document.querySelector(prev);\n    this.nextButton = document.querySelector(next);\n\n    this.init();\n  }\n\n  init = () => {\n    this.showStep();\n    this.firstInit = false;\n\n    this.prevButton?.addEventListener(\"click\", this.handlePrevStep);\n    this.nextButton?.addEventListener(\"click\", this.handleNextStep);\n  };\n\n  #managePrevStep = () => {\n    if (this.currentStep < 1) {\n      return this.allowOverscroll ? this.stepsCount - 1 : 0;\n    } else {\n      return this.currentStep - 1;\n    }\n  };\n\n  #manageNextStep = () => {\n    if (this.currentStep >= this.stepsCount - 1) {\n      return this.allowOverscroll ? 0 : this.stepsCount - 1;\n    } else {\n      return this.currentStep + 1;\n    }\n  };\n\n  handlePrevStep = () => {\n    const newStep = this.#managePrevStep();\n    this.showStep(newStep);\n  };\n\n  handleNextStep = () => {\n    const newStep = this.#manageNextStep();\n    this.showStep(newStep);\n  };\n\n  stepperActions = (nodeList, isPagination) => {\n    Array.from(nodeList).forEach((item, index) => {\n      const stepIndex = index + 1;\n      item.setAttribute(\"step\", stepIndex);\n\n      if (!isPagination) {\n        // Add step classes and manage active class\n        item.classList.add(...this.stepClass);\n        if (this.currentStep === index) {\n          item.classList.add(...this.stepActiveClass);\n        } else {\n          item.classList.remove(...this.stepActiveClass);\n        }\n      } else {\n        // Add pagination classes and manage active class\n        item.classList.add(...this.paginationClass);\n        if (this.currentStep === index) {\n          item.classList.add(...this.paginationActiveClass);\n        } else {\n          item.classList.remove(...this.paginationActiveClass);\n        }\n\n        // Add click event listener for pagination items\n        if (this.firstInit) {\n          item.addEventListener(\"click\", (e) => {\n            const selectedStep = parseInt(e.target.getAttribute(\"step\")) - 1;\n            this.showStep(selectedStep);\n          });\n        }\n      }\n    });\n  };\n\n  showStep = (step) => {\n    if (step !== undefined && this.isValidStep(step, this)) {\n      this.currentStep = step;\n    }\n    this.stepperActions(this.steps, false);\n    this.stepperActions(this.pagination, true);\n  };\n}\n"],"names":[],"version":3,"file":"light_stepper.js.map"}