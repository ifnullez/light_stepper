{"mappings":"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","sources":["<anon>","src/js/light_stepper.js"],"sourcesContent":["(function () {\n\n\nclass $378d07424827c466$export$2e2bcd8739ae039 {\n    constructor({ pagination: pagination, steps: steps, prev: prev, next: next, stepClass: stepClass = [\n        \"step\"\n    ], paginationClass: paginationClass = [\n        \"step__page\"\n    ], stepActiveClass: stepActiveClass = [\n        \"step--current\"\n    ], paginationActiveClass: paginationActiveClass = [\n        \"step__page--current\"\n    ], allowOverscroll: allowOverscroll = false, isValidStep: isValidStep = ()=>true }){\n        this.currentStep = 0;\n        this.firstInit = true;\n        // Initialize class properties\n        this.stepClass = stepClass;\n        this.paginationClass = paginationClass;\n        this.stepActiveClass = stepActiveClass;\n        this.paginationActiveClass = paginationActiveClass;\n        this.allowOverscroll = allowOverscroll;\n        this.isValidStep = isValidStep;\n        // Get pagination and steps elements\n        this.pagination = document.querySelector(pagination)?.children || [];\n        this.steps = document.querySelector(steps)?.children || [];\n        // Get prev and next buttons\n        this.prevButton = document.querySelector(prev);\n        this.nextButton = document.querySelector(next);\n        this.init();\n    }\n    init = ()=>{\n        this.showStep();\n        this.firstInit = false;\n        this.prevButton?.addEventListener(\"click\", this.prevStep);\n        this.nextButton?.addEventListener(\"click\", this.nextStep);\n    };\n    prevStep = ()=>{\n        const newStep = this.currentStep < 1 ? this.allowOverscroll ? this.steps.length - 1 : 0 : this.currentStep - 1;\n        if (this.isValidStep(newStep)) {\n            this.currentStep = newStep;\n            this.showStep();\n        }\n    };\n    nextStep = ()=>{\n        const newStep = this.currentStep >= this.steps.length - 1 ? this.allowOverscroll ? 0 : this.steps.length - 1 : this.currentStep + 1;\n        if (this.isValidStep(newStep)) {\n            this.currentStep = newStep;\n            this.showStep();\n        }\n    };\n    stepperActions = (nodeList, isPagination)=>{\n        Array.from(nodeList).forEach((item, index)=>{\n            const stepIndex = index + 1;\n            item.setAttribute(\"step\", stepIndex);\n            if (!isPagination) {\n                // Add step classes and manage active class\n                item.classList.add(...this.stepClass);\n                if (this.currentStep === index) item.classList.add(...this.stepActiveClass);\n                else item.classList.remove(...this.stepActiveClass);\n            } else {\n                // Add pagination classes and manage active class\n                item.classList.add(...this.paginationClass);\n                if (this.currentStep === index) item.classList.add(...this.paginationActiveClass);\n                else item.classList.remove(...this.paginationActiveClass);\n                // Add click event listener for pagination items\n                if (this.firstInit) item.addEventListener(\"click\", (e)=>{\n                    const selectedStep = parseInt(e.target.getAttribute(\"step\")) - 1;\n                    if (this.isValidStep(selectedStep)) {\n                        this.currentStep = selectedStep;\n                        this.showStep();\n                    }\n                });\n            }\n        });\n    };\n    showStep = ()=>{\n        this.stepperActions(this.steps, false);\n        this.stepperActions(this.pagination, true);\n    };\n}\nconst $378d07424827c466$var$stepper = new $378d07424827c466$export$2e2bcd8739ae039({\n    steps: \".stepper_steps\",\n    pagination: \".stepper_pagination\",\n    prev: \".stepper_prev\",\n    next: \".stepper_next\",\n    stepClass: [\n        \"step\",\n        \"animate__animated\"\n    ],\n    stepActiveClass: [\n        \"step--current\",\n        \"animate__bounceInDown\"\n    ],\n    allowOverscroll: false,\n    isValidStep: (step)=>{\n        console.log(step);\n        if (step >= 3) return false;\n        return true;\n    }\n});\n\n})();\n//# sourceMappingURL=light_stepper.js.map\n","import \"../scss/light_stepper.scss\";\nimport \"animate.css\";\n\nexport default class LightStepper {\n  constructor({\n    pagination,\n    steps,\n    prev,\n    next,\n    stepClass = [\"step\"],\n    paginationClass = [\"step__page\"],\n    stepActiveClass = [\"step--current\"],\n    paginationActiveClass = [\"step__page--current\"],\n    allowOverscroll = false,\n    isValidStep = () => true,\n  }) {\n    this.currentStep = 0;\n    this.firstInit = true;\n\n    // Initialize class properties\n    this.stepClass = stepClass;\n    this.paginationClass = paginationClass;\n    this.stepActiveClass = stepActiveClass;\n    this.paginationActiveClass = paginationActiveClass;\n    this.allowOverscroll = allowOverscroll;\n    this.isValidStep = isValidStep;\n\n    // Get pagination and steps elements\n    this.pagination = document.querySelector(pagination)?.children || [];\n    this.steps = document.querySelector(steps)?.children || [];\n\n    // Get prev and next buttons\n    this.prevButton = document.querySelector(prev);\n    this.nextButton = document.querySelector(next);\n\n    this.init();\n  }\n\n  init = () => {\n    this.showStep();\n    this.firstInit = false;\n\n    this.prevButton?.addEventListener(\"click\", this.prevStep);\n    this.nextButton?.addEventListener(\"click\", this.nextStep);\n  };\n\n  prevStep = () => {\n    const newStep =\n      this.currentStep < 1\n        ? this.allowOverscroll\n          ? this.steps.length - 1\n          : 0\n        : this.currentStep - 1;\n    if (this.isValidStep(newStep)) {\n      this.currentStep = newStep;\n      this.showStep();\n    }\n  };\n\n  nextStep = () => {\n    const newStep =\n      this.currentStep >= this.steps.length - 1\n        ? this.allowOverscroll\n          ? 0\n          : this.steps.length - 1\n        : this.currentStep + 1;\n    if (this.isValidStep(newStep)) {\n      this.currentStep = newStep;\n      this.showStep();\n    }\n  };\n\n  stepperActions = (nodeList, isPagination) => {\n    Array.from(nodeList).forEach((item, index) => {\n      const stepIndex = index + 1;\n      item.setAttribute(\"step\", stepIndex);\n\n      if (!isPagination) {\n        // Add step classes and manage active class\n        item.classList.add(...this.stepClass);\n        if (this.currentStep === index) {\n          item.classList.add(...this.stepActiveClass);\n        } else {\n          item.classList.remove(...this.stepActiveClass);\n        }\n      } else {\n        // Add pagination classes and manage active class\n        item.classList.add(...this.paginationClass);\n        if (this.currentStep === index) {\n          item.classList.add(...this.paginationActiveClass);\n        } else {\n          item.classList.remove(...this.paginationActiveClass);\n        }\n\n        // Add click event listener for pagination items\n        if (this.firstInit) {\n          item.addEventListener(\"click\", (e) => {\n            const selectedStep = parseInt(e.target.getAttribute(\"step\")) - 1;\n            if (this.isValidStep(selectedStep)) {\n              this.currentStep = selectedStep;\n              this.showStep();\n            }\n          });\n        }\n      }\n    });\n  };\n\n  showStep = () => {\n    this.stepperActions(this.steps, false);\n    this.stepperActions(this.pagination, true);\n  };\n}\n\nconst stepper = new LightStepper({\n  steps: \".stepper_steps\",\n  pagination: \".stepper_pagination\",\n  prev: \".stepper_prev\",\n  next: \".stepper_next\",\n  stepClass: [\"step\", \"animate__animated\"],\n  stepActiveClass: [\"step--current\", \"animate__bounceInDown\"],\n  allowOverscroll: false,\n  isValidStep: (step) => {\n    console.log(step);\n    if (step >= 3) {\n      return false;\n    }\n    return true;\n  },\n});\n"],"names":["constructor","pagination","steps","prev","next","stepClass","paginationClass","stepActiveClass","paginationActiveClass","allowOverscroll","isValidStep","currentStep","firstInit","document","querySelector","children","prevButton","nextButton","init","showStep","addEventListener","prevStep","nextStep","newStep","length","stepperActions","nodeList","isPagination","Array","from","forEach","item","index","setAttribute","classList","add","remove","e","selectedStep","parseInt","target","getAttribute","step","console","log"],"version":3,"file":"light_stepper.js.map"}